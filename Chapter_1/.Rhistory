x <- c(0:10, 50)
x
library(el071)
install.packages('el071')
plot(iris[,1:4])
plot(iris[1:4])
```
plot(iris[1:4])
```{r}
plot(iris[1:4])
```
plot(iris[1:4])
```{r}
install.packages("Cluster")
install.packages('cluster')
install.packages('factoextra')
getwd()
quit()
VADeaths
colnames(VADeaths)
rownames(VADeaths)
VADeaths
colnames(VADeaths)
rownames(VADeaths)
colnames(VADeaths)
rownames(VADeaths)
VADeaths
colnames(VADeaths)
VADeaths
colnames(VADeaths)
VADeaths
colnames(VADeaths)
rownames(VADeaths)
getwd()
getwd()
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
dados <- read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
head(dados)
summary(dados)
("D:\teste")
getwd()
getwd()
choose(3,1)
(choose(15,0)*(0.16^0)*(0.84^15))+(choose(15,1)*0.16*(0.84^14))+ (choose(15,2)*(0.16^2)*(0.84)^13))+(choose(15,3)*(0.16^3)*(0.84^12)))
(choose(15,0)*(0.16^0)*(0.84^15))+(choose(15,1)*0.16*(0.84^14))+ (choose(15,2)*(0.16^2)*(0.84)^13))+(choose(15,3)*(0.16^3)*(0.84^12))))
(choose(15,0)*(0.16^0)*(0.84^15))+(choose(15,1)*0.16*(0.84^14))+ (choose(15,2)*(0.16^2)*(0.84)^13))+(choose(15,3)*(0.16^3)*(0.84^12))
(factorial(15)/(factorial(3)*factorial(2)*factorial(5)*factorial(5))
(factorial(15)/(factorial(3)*factorial(2)*factorial(5)*factorial(5))
0.16^(3)*0.14^(2)*0.38^(5)*0.32^(5)
factorial(5)
factorial(5)/factorial(3)
factorial(5)/(factorial(3)*factorial(2)*factorial(5)*factorial(5))
(factorial(15)/(factorial(3)*factorial(2)*factorial(5)*factorial(5))*0.16^(3)*0.14^(2)*0.38^(5)*0.32^(5)
,
factorial(5)/factorial(3)
factorial(15)/(factorial(3)*factorial(2)*factorial(5)*factorial(5))
7567560*0.16^(3)*0.14^(2)*0.38^(5)*0.32^(5)
choose(15,0)*0.84^15
choose(15,1)*0.16^(1)*0.84^14
choose(15,2)*0.16^(2)*0.84^13
choose(15,3)*0.16^(3)*0.84^12
0.07314578+0.208988+0.2786506+0.2299973
choose(15,8)*0.16^(8)*0.84^7
choose(15,9)*(0.16^9)*(0.84^6)
choose(15,9)*0.16^(9)*0.84^(6)
# ignora o de cima
choose(15,10)*0.16^(10)*0.84^5
choose(15,8)*0.16^(8)*0.84^7 + choose(15,9)*(0.16^9)*(0.84^6) +  choose(15,10)*0.16^(10)*0.84^5
choose(15,8)*0.16^(8)*0.84^7 + choose(15,9)*(0.16^9)*(0.84^6) +  choose(15,10)*0.16^(10)*0.84^5 + choose(15,11)*0.16^(11)*0.84^4 + choose(15,12)*0.16^(12)*0.84^(3) + choose(15, 13)*0.16^(13)*0.84^(2)+choose(15,14)*0.16^(14)*0.84+choose(15,15)*0.16^15
pbinom(q=8,size=15,prob=0.16)
1 - pbinom(q=8,size=15,prob=0.16)
1 - pbinom(7, size=15, prob=0.16)
1 - pbinom(q = 7, size = 15, prob=0.14)
0.0003766581 +  0.0009514834
pbinom(q = 3, size = 15, prob=0.16)
(factorial(15)/(factorial(3)*factorial(2)*factorial(5)*factorial(5)))
7567560*0.16^(3)*0.14^(2)*0.32^(5)*0.38^5
mean(v)
var(v)
v <- c(-7, -2, 2, 5, 2, -2, -18, -7, -3, 1, -6)
var(v)
x <- var(v)
y <- mean(v)
n <- 11
z <- y/(x/n)
z
v <- c(7, 2, -2, -5, -2, 2, 18, 7, 3, -1, 6)
x <- var(v)
y <- mean(v)
n <- sqrt(11)
z <- y/(x/n)
z
x <- var(v)
x
y <- mean(v)
y
z <- y/(x/n)
z
x <- c(5.1, 4.8, 5, 4.7, 4.8, 5, 4.5, 4.9, 4.8, 5.2)
mean(x)
var(x)
sqrt(var(x))
("installr")
install.packages("installr")
library(installr)
updateR()
updateR()
getwd()
dados = read.csv('churn.csv')
dados = read.csv('churn.csv')
getwd()
dados = read.csv("C:/Users/Pichau/Documents/todos os arquivos/9.Prática em R/dados")
getwd()
dados = read.csv(file.choose())
dados
dados = read.csv(file.choose(), sep=';')
dados
dados = read.csv(file.choose(), sep=';')
dados
getwd()
dados1 = read.csv('Churn.csv')
dados1
dados1 = read.csv('Churn.csv')
dados1
dados = read.csv('Churn.csv')
dados
dados = read.csv('Churn.csv', sep=',')
dados
dados = read.csv('Churn.csv', sep=';')
dados
head(dados)
summary(dados)
# dando nome as colunas
colnames(dados) <- c("ID", 'Score', "Estado", "Gênero", "Idade", "Patrimônio", "Saldo
", "Produtos", "TemCartCredito", "Ativo", "Salario", "Saiu")
head(dados)
dados
View(dados)
View(dados)
View(dados1)
View(dados1)
View(dados1)
counts <- table(dados$estado)
counts
barplot(counts, main="Estados", xlab="Estados")
counts <- table(dados$Estado)
barplot(counts, main="Estados", xlab="Estados")
counts_gen <- table(dados$Genero)
barplot(counts_gen, main="Gênero", xlab = "Gênero")
counts_gen <- table(dados$Gênero)
barplot(counts_gen, main="Gênero", xlab = "Gênero")
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
summary(dados$Idade)
#saldo
summary(dados$Saldo)
boxplot(dados$Saldo)
options(scipen = 999)
boxplot(dados$Saldo)
options(scipen = 9999)
boxplot(dados$Saldo)
options(scipen = 999)
boxplot(dados$Saldo)
hist(dados$Saldo)
barplot(counts_gen, main="Gênero", xlab = "Gênero")
hist(dados$Saldo)
dados[!complete.cases(dados),]
dados[complete.cases(dados)]
dados[!complete.cases(dados),]
dados[!complete.cases(dados),]
#tratar salarios
summary(dados$Salario)
#ver mediana
median(dados$Salario, na.rm = T)
#ver mediana
median(dados$Salario, na.rm = F)
#ver mediana
median(dados$Salario, na.rm = T)
dados(dados$Salario)
is.na(dados$Salario),
#atribuir mediana a NAs
dados[is.na(dados$Salario),]$Salario
#atribuir mediana a NAs
dados[is.na(dados$Salario),]$Salario = median(dados$Salario, na.rm = T)
dados[!complete.cases(dados),]
dados[!complete.cases(dados$Salario),]
dados[!complete.cases(dados$Salario),]
#falta de padronização
unique(dados$Genero)
#falta de padronização
unique(dados$Gênero)
summary(dados$Gênero)
summary(dados$Gênero)
summary(dados$Gênero)
summary(dados$Gênero)
#tratar salarios
summary(dados$Salario)
summary(dados$Gênero)
dados[dados$Gênero]
#falta de padronização
unique(dados$Gênero)
summary(dados$Gênero)
summary(dados$Genero)
summary(dados$Idade)
summary(dados$Genero)
dados[is.na(dados$Gênero) | dados$Gênero == "M", ]$Gênero = "Masculino"
dados[dados$Gênero == "F" | dados$Gênero == "Fem", ]$Gênero = "Feminino"
summary(dados$Gênero)
dados(table(unlist(strsplit(tolower(dados$Gênero), " "))))
data.frame(table(unlist(strsplit(tolower(dados$Gênero), " "))))
#remover levels não utilizados
dados$Gênero = factor(dados$Gênero)
#idades fora do dominio
data.frame(table(unlist(strsplit(tolower(dados$Idade), " "))))
#idades fora do dominio
summary(dados$Idade)
dados[dados$Idade <0 | dados$Idade > 110, ]$Idade
dados[dados$Idade <0 | dados$Idade > 110, ]
$Idade
dados[dados$Idade <0 | dados$Idade > 110, ]$Idade
dados[is.na(dados$Idade), ]
dados[!complete.cases(dados),] #achamos todos os valores que tem NA, o ! é pra negação, o , é pra todas as colunas
#substituição, preencher com a mediana
dados[dados$Idade < 0 | dados$Idade > 110, ]$ Idade = median(dados$Idade)
dados[dados$Idade <0 | dados$Idade > 110, ]$Idade
dados[dados$Idade <0 | dados$Idade > 110, ]$Idade
x <- dados[duplicated(dados$ID)]
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
x <- dados[duplicated(dados$ID)]
dados = read.csv('Churn.csv', sep=';', na.strings="", stringAsFactors = T)
dados = read.csv('Churn.csv', sep=';', na.strings="", stringAsFactors = T)
head(dados)
dados = read.csv('Churn.csv', sep=';', na.strings="", stringAsFactors = T)
head(dados)
head(dados)
summary(dados)
summary(dados$Score)
hist(dados$Score)
x <- dados[duplicated(dados$ID)]
x <- dados[duplicated(dados$ID),]
x
x <- dados[duplicated(dados$ID),]
x
dados1 <- dados[dados(-c(81))]
x$ID
dados$ID
dados <- dados[!dados$ID %in% c(x$ID),]
dados[dados$ID == x$ID, ]
y <- dados[duplicated(dados$ID), ]
y
unique(dados$Estado)
summary(dados$Estado)
# preencher com a moda
dados[dados$Estado %in% c("RS", "SC", "PR"),]$Estado = "Rs"
dados <- dados[!dados$ID %in% c(x$ID),]
dados
unique(dados$Estado)
data.frame(table(unlist(strsplit(tolower(dados$Estado), " "))))
dados = read.csv('Churn.csv', sep=';', na.strings="", stringAsFactors = T)
dados$Estado =factor(dados$Estado)
desv = sd(dados$Salario, na.rm=T)
desv
dados[dados$Salario >= 2*desv, ]$Salario
#outra forma, resultado semelhante sem os NAS
boxplot(dados$Salario)
#outra forma, resultado semelhante sem os NAS
options(scipen = 999)
boxplot
#outra forma, resultado semelhante sem os NAS
options(scipen = 999)
boxplot(dados$Salario)
x <- boxplot(dados$Salario, outline = F)
X
y <- boxplot(dados$Salario)$out #valores outliers
y
mediana <- median(dados$Salario)
dados[dados$Salario >= 2*desv,]$Salario = mediana
dados[dados$Salario >= 2*desv, ]$Salario
getwd()
getwd()
save.image("~/file in r.RData")
load("~/file in r.RData")
load("~/file in r.RData")
setwd()
getwd()
save.image("C:/Users/Pichau/Desktop/R EDA/EDA.RData")
load("C:/Users/Pichau/Desktop/R EDA/EDA.RData")
load("C:/Users/Pichau/Desktop/R EDA/EDA.RData")
ls()
getwd()
save.image("C:/Users/Pichau/Desktop/R EDA/rtest2.RData")
print('oi')
print('oioo')
getwd()
dados <- read.csv('tempo.csv', sep = ';', stringsAsFactors = T)
x <- 4 + 2
dados <- read.csv('tempo.csv', sep = ';', stringsAsFactors = T)
dados
summary(dados$Umidade)
dados[dados$Temperatura < -130 | dados$Temperatura > 130,]$Temperatura <- median(dados$Temperatura)
dados
dados[is.na(dados$Umidade),]$Umidade = median(dados$Umidade, na.rm = T)
dados[dados$Umidade < 0 | dados$Umidade > 100,]$Umidade <- mean(dados$Umidade)
dados
dados <- dados[-which(dados$Vento == ""),]
dados
data.frame(table(unlist(strsplit(tolower(dados$Aparencia), " "))))
dados[dados$Aparencia == "menos", ]$Aparencia = "sol"
dados
x <- 4
leitura <- read.csv("dados.csv")
leitura <- read.csv("dados.csv")
getwd()
getwd()
leitura <- read.csv("dados.csv", dec = ".", stringsAsFactors = TRUE, sep = ";")
summary(leitura$VALOREMPENHO)
summary(leitura$PIB)
getwd()
#paleta de cores
library("RColorBrewer")
#install.packages("RColorBrewer")
dados = read.csv('dados.csv', sep=";")
```{r}
```{r}
#paleta de cores
library("RColorBrewer")
#install.packages("RColorBrewer")
getwd()
dados = read.csv('dados.csv', sep=";")
head(dados)
getwd()
dados <- read.csv('churn.csv', sep = ';', na.strings = "", stringsAsFactors = T)
View(dados)
summary(dados)
colnames(dados) <- c('Id', 'Score', 'Estado', 'Gênero', 'Idade', 'Patrimônio',
'Saldo', 'Produtos', 'TemCartCredito', 'Ativo', 'Salario',
'Saiu')
head(dados)
counts <- table(dados$Estado)
barplot(counts, main = "Estados", xlab = "Estados")
barplot(counts, main = "Gêneros", xlab = "Gêneros")
counts <- table(dados$Gênero)
barplot(counts, main = "Gêneros", xlab = "Gêneros")
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
summary(dados$Idade)
#tratando valores faltantes
dados[!complete.cases(dados),]
median(dados$Salario, na.rm = T)
dados[is.na(dados$Salario), ]$Salario <- median(dados$Salario, na.rm = T)
dados[!complete.cases(dados),]
dados[is.na(dados$Salario), ]$Salario <- median(dados$Salario, na.rm = T)
dados[!complete.cases(dados),]
#tratando valores faltantes
dados[!complete.cases(dados),]
dados[is.na(dados$Salario), ]$Salario = median(dados$Salario, na.rm = T)
dados[!complete.cases(dados),]
is.na(dados$Salario)
unique(dados$Gênero)
summary(dados$Gênero)
dados[is.na(dados$Gênero) | dados$Gênero == "M", ]$Gênero = "Masculino"
dados[dados$Gênero == 'F' | dados$Gênero == 'Fem', ]$Gênero = "Feminino"
summary(dados$Gênero)
dados$Gênero = factor(dados$Gênero)
summary(dados$Gênero)
dados[dados$Idade < 0 | dados$Idade > 110, ]$Idade
dados[is.na(dados$Idade),]
dados[is.na(dados$Idade)]
dados[is.na(dados$Idade),]
dados[dados$Idade < 0 | dados$Idade > 110, ]$Idade = median(dados$Idade)
summary(dados$Idade)
#buscar dados duplicados pelo id
x <- dados[duplicated(dados$Id), ]
x
dados = dados[-c(82), ]
dados[duplicated(dados$Id)]
unique(dados$Estado)
summary(dados$Estado)
dados[!dados$Estado %in% c('RS', 'SC', 'PR'), ]$Estado = 'RS'
summary(dados$Estado)
dados$Estado = factor(dados$Estado)
summary(dados$Estado)
#outliers
desv = sd(dados$Salario, na.rm = T)
dados[dados$Salario > 2*desv,]$Salario
desv
boxplot(dados$Salario)
x = boxplot(dados$Salario)$out
x
dados[dados$Salario >= 2*desv, ]$Salario = median(dados$Salario)
dados[dados$Salario >= 2*desv, ]$Salario
boxplot(dados$Salario)
amostra <- sample(c(0,1), 150, replace = TRUE, prob = c(0.5, 0.5))
amostra
summary(as.factor(amostra))
amostra
summary(as.factor(amostra))
summary(as.factor(amostra))
amostra = sample(c(0,1), 150, replae = TRUE, prob = c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra <- sample(c(0,1), 150, replae = TRUE, prob = c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra <- sample(c(0,1), 150, replace = TRUE, prob = c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra = sample(c(1:1000), 150, replace = FALSE)
amostra
amostra = sample(c(0, 1), 150, replace = TRUE, prob = c(0.7, 0.3))
summary(as.factor(amostra))
amostrairis = iris[amostra==1,]
amostrairis
dim(amostrairis)
amostrairis
dim(amostrairis)
amostrairis
set.seed(2345)
install.packages('TeachingSampling')
install.packages('TeachingSampling')
library('TeachingSampling')
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostrairis = iris[amostra,]
amostrairis
install.packages('sampling')
library('sampling')
proporcao = 25
proporcao = 25
amostrairis2 = strata(data = iris,
stratanames = c('Speies'), size = c(rep(proporcao, 3)), method =
'srswor')
amostrairis2 = strata(data = iris,
stratanames = c('Species'), size = c(rep(proporcao, 3)),
method = 'srswor')
summary(amostrairis2)
summary(amostrairis2)
infert
summary(infert)
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
mean(jogadores)
quartis = quartile(jogadores)
quartis = quantile(jogadores)
quartis
summary(jogadores)
options(warn = -1)
install.packages('semTools')
install.packages('semTools')
library(semTools)
z = rep(0, 500)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2),
skewness = c(5, 2), kurtosis = c(3, 3))
z[i] = mean(m)
if (i<4) {
hist(m, breaks = 50, main = paste0('Histograma', i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
qqline(x)
shapiro.test(x)
hist(x, main = "")
par(new = TRUE)
plot(density(x), ylab = "", xlab = "", axes = F, lwd = 2.5)
library(semTools)
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2),
skewness = c(5, 2), kurtosis = c(3, 3))
qqnorm(m)
qqline(m)
shapiro.test(m)
pt(1.5, 8)
pt(1.5, 8, lower.tail = F)
setwd('C:\Users\Pichau\Documents\Book - Practical Data Science with R\Chapter 1')
setwd('C:/Users/Pichau/Documents/Book - Practical Data Science with R/Chapter 1')
library('rpart')
load('loan_model_example.RData')
coef_matrix <- table(actual =d$Loan_status, pred = predict(model, type = 'class'))
coef_matrix
accuracy <- sum(diag(coef_matrix)) / sum(coef_matrix)
accuracy
precision <- coef_matrix['BadLoan', 'BadLoan'] / sum(coef_matrix[, 'BadLoan'])
precision
recall <- coef_matrix['BadLoan', 'BadLoan'] / sum(coef_matrix['BadLoan',])
recall
fpr <- coef_matrix['GoodLoan', 'BadLoan'] / sum(coef_matrix['GoodLoan',])
fpr
